// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/Inc16.hdl

/**
 * 16-bit incrementer:
 * out = in + 1 (arithmetic addition)
 */

/*
 * Bit 0:
 * P[0] = a[0] XOR 1 = NOT a[0]
 * G[0] = a[0] AND 1 = a[0]
 *
 * Other:
 * P[i] = a[i] XOR 0 = a[i]
 * G[i] = a[i] AND 0 = 0
 * 
 * Implementation:
 * Bit 0:
 * C[1] = G[0] OR (P[0] AND C[0])
 *      = a[0] OR (NOT a[0] AND 0)
 *      = a[0]
 * sum[0] = P[0] XOR C[0] = (NOT a[0]) XOR 0
 *        = NOT a[0]
 *
 * C[2] = G[1] OR (P[1] AND C[1])
 *      = 0 OR (a[1] AND a[0])
 *      = a[1] AND a[0]
 * sum[1] = P[1] XOR C[1] = a[1] XOR a[0]
 * 
 * C[3] = P[2] AND C[2]
 *      = a[2] AND C[2]
 * sum[3] = P[2] XOR C[2] = a[2] XOR C[2]
 */

CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
    /* Bit 0 */
    Not(in=in[0], out=out[0]);

    /* Bit 1 - 2 */
    Xor(a=in[1], b=in[0], out=out[1]);
    And(a=in[1], b=in[0], out=c2);

    Xor(a=in[2], b=c2, out=out[2]);
    And(a=in[2], b=c2, out=Cr3);

    And(a=in[1], b=in[2], out=p12);
    And(a=p12, b=in[0], out=Cs3);
    Or(a=Cr3, b=Cs3, out=c3);


    /* Bit 3 - 5 */
    Xor(a=in[3], b=c3, out=out[3]);
    And(a=in[3], b=c3, out=c4);

    Xor(a=in[4], b=c4, out=out[4]);
    And(a=in[4], b=c4, out=c5);

    Xor(a=in[5], b=c5, out=out[5]);
    And(a=in[5], b=c5, out=Cr6);

    And(a=in[3], b=in[4], out=p34); And(a=p34, b=in[5], out=p345);
    And(a=p345, b=c3, out=Cs6);
    Or(a=Cr6, b=Cs6, out=c6);

    /* Bit 6 - 9 */
    Xor(a=in[6], b=c6, out=out[6]);
    And(a=in[6], b=c6, out=c7);

    Xor(a=in[7], b=c7, out=out[7]);
    And(a=in[7], b=c7, out=c8);

    Xor(a=in[8], b=c8, out=out[8]);
    And(a=in[8], b=c8, out=c9);

    Xor(a=in[9], b=c9, out=out[9]);
    And(a=in[9], b=c9, out=Cr10);

    And(a=in[6], b=in[7], out=p67); And(a=in[8], b=in[9], out=p89); And(a=p67, b=p89, out=p6789);
    And(a=p6789, b=c6, out=Cs10);
    Or(a=Cr10, b=Cs10, out=c10);

    /* Bit 10 - 12 */
    Xor(a=in[10], b=c10, out=out[10]);
    And(a=in[10], b=c10, out=c11);

    Xor(a=in[11], b=c11, out=out[11]);
    And(a=in[11], b=c11, out=c12);

    Xor(a=in[12], b=c12, out=out[12]);
    And(a=in[12], b=c12, out=Cr13);

    And(a=in[10], b=in[11], out=p10p11); And(a=p10p11, b=in[12], out=p10p11p12);
    And(a=p10p11p12, b=c10, out=Cs13);
    Or(a=Cr13, b=Cs13, out=c13);

    /* Bit 13 - 14 */
    Xor(a=in[13], b=c13, out=out[13]);
    And(a=in[13], b=c13, out=c14);

    Xor(a=in[14], b=c14, out=out[14]);
    And(a=in[14], b=c14, out=Cr15);

    And(a=in[13], b=in[14], out=p13p14);
    And(a=p13p14, b=c13, out=Cs15);
    Or(a=Cr15, b=Cs15, out=c15);

    /* Bit 15 */
    Xor(a=in[15], b=c15, out=out[15]);
}
